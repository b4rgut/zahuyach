name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Format code
        run: |
          cargo fmt
          if [[ -n $(git status -s) ]]; then
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add .
            git commit -m "chore: format code"
          fi

      - name: Run tests
        run: cargo test

      - name: Check if already published
        id: check_published
        run: |
          CRATE_NAME=$(grep '^name' Cargo.toml | sed 's/name = "\(.*\)"/\1/')
          CURRENT_VERSION=$(grep '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')

          # Check if crate exists on crates.io
          if curl -s "https://crates.io/api/v1/crates/$CRATE_NAME" | grep -q "\"name\":\"$CRATE_NAME\""; then
            echo "published=true" >> $GITHUB_OUTPUT
            # Check if current version is already published
            if curl -s "https://crates.io/api/v1/crates/$CRATE_NAME/$CURRENT_VERSION" | grep -q "\"version\":\"$CURRENT_VERSION\""; then
              echo "current_published=true" >> $GITHUB_OUTPUT
            else
              echo "current_published=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "published=false" >> $GITHUB_OUTPUT
            echo "current_published=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump
        id: bump
        run: |
          # If never published, don't bump, just use current version
          if [[ "${{ steps.check_published.outputs.published }}" == "false" ]]; then
            echo "type=none" >> $GITHUB_OUTPUT
            echo "first_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # If current version already published, determine bump
          if [[ "${{ steps.check_published.outputs.current_published }}" == "true" ]]; then
            # Get commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ -z "$LAST_TAG" ]; then
              COMMITS=$(git log --format=%s)
            else
              COMMITS=$(git log $LAST_TAG..HEAD --format=%s)
            fi

            # Determine bump type
            if echo "$COMMITS" | grep -E "^[a-z]+(\(.+\))?!:" > /dev/null; then
              echo "type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -E "^feat(\(.+\))?:" > /dev/null; then
              echo "type=minor" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -E "^fix(\(.+\))?:" > /dev/null; then
              echo "type=patch" >> $GITHUB_OUTPUT
            else
              # Default to patch if there are any commits
              if [ -n "$COMMITS" ]; then
                echo "type=patch" >> $GITHUB_OUTPUT
              else
                echo "type=none" >> $GITHUB_OUTPUT
              fi
            fi
          else
            # Current version not published yet, just use it
            echo "type=none" >> $GITHUB_OUTPUT
          fi
          echo "first_release=false" >> $GITHUB_OUTPUT

      - name: Bump version
        if: steps.bump.outputs.type != 'none'
        run: |
          cargo set-version --bump ${{ steps.bump.outputs.type }}
          NEW_VERSION=$(grep '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Set version for tagging
        if: steps.bump.outputs.type == 'none'
        run: |
          NEW_VERSION=$(grep '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and push
        if: steps.bump.outputs.type != 'none'
        run: |
          git add Cargo.toml Cargo.lock
          git commit -m "chore: release v${{ env.NEW_VERSION }}"
          git push

      - name: Create tag
        if: steps.check_published.outputs.current_published != 'true'
        run: |
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Publish to crates.io
        if: steps.check_published.outputs.current_published != 'true'
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
