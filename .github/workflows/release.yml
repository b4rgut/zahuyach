name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Format code
        run: |
          cargo fmt
          if [[ -n $(git status -s) ]]; then
            git config user.name github-actions
            git config user.email github-actions@github.com
            git add .
            git commit -m "chore: format code"
          fi

      - name: Run tests
        run: cargo test

      - name: Determine version bump
        id: bump
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --format=%s)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --format=%s)
          fi

          # Determine bump type
          if echo "$COMMITS" | grep -E "^[a-z]+(\(.+\))?!:" > /dev/null; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -E "^feat(\(.+\))?:" > /dev/null; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -E "^fix(\(.+\))?:" > /dev/null; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "type=none" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        if: steps.bump.outputs.type != 'none'
        run: |
          cargo set-version --bump ${{ steps.bump.outputs.type }}
          NEW_VERSION=$(grep '^version' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Commit and push
        if: steps.bump.outputs.type != 'none'
        run: |
          git add Cargo.toml Cargo.lock
          git commit -m "chore: release v${{ env.NEW_VERSION }}"
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
          git push --follow-tags

      - name: Publish to crates.io
        if: steps.bump.outputs.type != 'none'
        run: cargo publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
